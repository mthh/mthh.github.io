Exercice 4 - Automatisation d'actions répétitives
=================================================

.. figure:: img/ex4_osm.png
  :width: 40%
  :align: center
  :figwidth: 98%


Objectif
--------

Cet exerice à pour objectif de montrer l'intérêt de la console Python pour automatiser des actions répétitives.

Données
-------

| -> Données **OpenStreetMap** (transformées en Shapefile par GeoFabrik) pour l'ile de Malte [#f1]_.
| -> Styles QGIS pour données OSM [#f2]_.


Problème
--------

Lors de la décompression de l'archive ``malta-latest.shp.zip`` on peut constater
que de nombreux fichiers sont extraits (16 couches). Seules 12 d'entres elles vont
nous être utile.

Pour appliquer les styles téléchargés, en l'absence de projet ``.qgs`` nous devrons effectuer les étapes suivantes.
  - charger les différentes couches nécessaires,
  - appliquer le style téléchargé (par exemple : double-click sur la couche ``gis_osm_water_a_free_1.shp``
    pour ouvrir les propriétés de style, puis click sur ``Style .. > Charger style ..`` et sélection du style
    ayant le nom ``gis_osm_water_a_free_1.qml``),
  - ... en faisant attention à l'ordre des couches !


.. figure:: img/ex4_consignes_GH.png
  :align: center
  :figwidth: 98%

  Exemple d'instructions trouvées sur internet.


N'étant pas satisfait par les propriétés de transparence, nous verrons
commment la changer sur toutes les couches qui contiennent des polygones.

On va tout effectuer en Python pour voir le gain de temps que ça peut représenter.

Procédure
---------

- Rappel concernant les chemins et les chaines de caractères en Python
  ::

    # On accède à la majorité des fonctions relatives à la navigation
    # dans l'arborescence du système de fichier à part du module 'os'

    import os

    # Conntaire le dossier actuel de travail
    os.getcwd() # getcwd -> get current working directory

    # Se rendre dans le dossier approprié :
    os.chdir('TP_Python_Qgis/data/ex4')

    # Lister le contenu d'un dossier (ici le dossier 'Styles')
    os.listdir('Styles') # On utilise '.' pour le dossier actuel

    # Lister les fichiers d'un type particulier au sein d'un dossier
    # en utilisant une liste de compréhension
    names_svg = \
        [name for name in os.listdir('/home/mthh/Images') if '.svg' in name]

    # Remplacer/supprimer une sous-chaine de caractères :
    name = 'filename.svg'
    name.replace('.svg', '')  # 'filename'
    name.replace('.svg', '.png')  # 'filename.png'


- Nouvelles notions en PyQgis concernant le projet en cours :

  ::

    # Obtenir une référence au projet en cours :
    project = QgsProject().instance()

    # Enlever les couches existantes dans le projet actuel :
    project.clear()

    # Régler la projection du projet sur "Web-Mercator" :
    project.setCrs(QgsCoordinateReferenceSystem('EPSG:3857'))

    # Exporter le projet au format `.qgs` :


- Nouvelles notions en PyQgis concernant les couches vecteurs (``QgsVectorLayer``)

  ::

    # Ajouter une couche, charger un style et le lui appliquer :
    layer = iface.addVectorLayer('path/to/layer.shp', name, 'ogr')
    layer.loadNamedStyle('path/to/style.qml')
    layer.triggerRepaint()

    # Si on ajoute plusieurs couches à la suite et que la mise en cache
    # n'est pas active on évitera d'appeler
    # la méthode 'triggerRepaint' sur chaque couche et on préférera
    # rafraichir l'ensemble du canvas une fois l'opération terminée :
    if iface.mapCanvas().isCachingEnabled():
        layer.triggerRepaint()
    else:
        iface.mapCanvas().refresh()


- **À vous de jouer !**
  Depuis la console Python, il faut se rendre dans le dossier ``data/ex4``,
  lister les styles disponibles (fichiers ``.qml``) et utiliser leurs noms
  pour charger les fichiers Shapefile correspondants.
  Pour chaque Shapefile on appliquera le style approprié.


  .. container:: spoiler blq

     Solution :

     ::

        import os

        # Se rendre dans le dossier approprié
        os.chdir('TP_Python_Qgis/data/ex4')

        # Doit on demander un nouveau rendu sur chaque couche
        if iface.mapCanvas().isCachingEnabled():
            repaint = True
        else:
            repaint = False

        # Enlever les couches existantes dans le projet actuel
        project = QgsProject().instance()
        project.clear()

        # Créer une liste contenant le nom de chacune
        # des couches à ajouter en fonction des styles disponibles

        names = [n.replace('.qml', '') for n in os.listdir('Styles')]

        # Ajouter chacune de ces couches et lui appliquer son style
        for name in names:
            layer = iface.addVectorLayer(name + '.shp', name, 'ogr')
            layer.loadNamedStyle('Styles/' + name + '.qml')
            if repaint:
                layer.triggerRepaint()

        # Régler la projection du projet sur "Web-Mercator"
        project.setCrs(QgsCoordinateReferenceSystem('EPSG:3857'))

        # Changer l'étendue du canvas en utilisant deux points connus
        # pour définir l'emprise
        p1 = QgsPointXY(1599940,4290936) # Coordonnées en haut à gauche
        p2 = QgsPointXY(1617650,4284653) # Coordonnées en bas à droite
        rect = QgsRectangle(p1, p2)
        iface.mapCanvas().setExtent(rect)
        iface.mapCanvas().refresh()


- Et l'ordre des couches ? Le voici. Utiliser cette variable pour obtenir l'ordre
  souhaité !
  ::

    ordre = [
        'gis_osm_traffic_a_free_1',
        'gis_osm_pofw_a_free_1',
        'gis_osm_places_free_1',
        'gis_osm_natural_free_1',
        'gis_osm_roads_free_1',
        'gis_osm_buildings_a_free_1',
        'gis_osm_pois_a_free_1',
        'gis_osm_water_a_free_1',
        'gis_osm_waterways_free_1',
        'gis_osm_landuse_a_free_1',
        'gis_osm_natural_a_free_1',
        ]


  .. container:: spoiler blq

     Solution :

     ::

       layerTree = QgsProject.instance().layerTreeRoot()
       for ix, name in enumerate(ordre):
           layer = QgsProject.instance().mapLayersByName(name)[0]
           layer_node = root.findLayer(layer.id())
           node = layer_node.clone()
           root.insertChildNode(0, node)
           root.removeChildNode(layer_node)



- Nous devons maintenant régler la transparence de chacune des couches de
  type ``Polygon`` à 80%.
  **À vous de jouer !** *(La cheatsheet de ce TP, un moteur de recherche et/ou la documentation PyQgis
  seront utiles)*

  .. container:: spoiler blq

     Solution :

     ::

        for layer in iface.mapCanvas().layers():
            if layer.wkbType() in (
                  QgsWkbTypes.Polygon, QgsWkbTypes.MultiPolygon):
                layer.setOpacity(0.8)

        iface.mapCanvas().refresh()



Autres exemples
---------------

Qu'en est-il des actions qu'il pourrait être nécessaire d'effectuer à chaque ouverture d'un projet
spécifique ? Il est possible de définir des fonctions Python qui seront appelées à l'ouverture, à l'enregistrement ou
à la fermeture d'un projet.

.. figure:: img/ex4_macros.png
  :width: 100%
  :align: center
  :figwidth: 98%


- Nous souhaitons par exemple afficher un message d'avertissement à l'ouverture d'un projet :
  ::

    def openProject():
        msg_bar = iface.messageBar()
        msg_bar.pushMessage(
          'WARNING', # Le titre du message
          'Le projet contient des données sensibles.', # Son contenu
          Qgis.WARNING, # Le type de message
          15, # Le délai d'affichage
        )


.. rubric:: Footnotes

.. [#f1] `© les contributeurs d’OpenStreetMap <https://www.openstreetmap.org/copyright>`_. Source : http://download.geofabrik.de/europe/malta.html. Données téléchargées le 01/03/2019.
.. [#f2] Adaptés depuis les styles de `MrXsquared <https://github.com/MrXsquared/>`_. Données téléchargées le 01/03/2019.
