Introduction QGIS
=================

.. image:: img/QGIS_logo_new.svg
  :width: 18%
  :align: center

QGIS est un logiciel de SIG distribué sous licence libre GNU GPL.
C'est un projet officiel de la fondation OSGeo (Open Source Geospatial) qui
permet de visualiser, gérer, éditer, analyser des données géospatiales et de composer des cartes.
Les formats de données (vecteurs et rasters) qu'il supporte sont très nombreux
et il permet également de se connecter à différents type de bases de données.

QGIS est developpé en C++ (en utilisant notamment le framework Qt) et
il est notamment compatible avec GNU/Linux, Max OS X et Windows.

Depuis QGIS 0.9 le logiciel dispose d'une API python permettant :

- d'appeler l'API depus la console Python de QGIS.
- de créer des plugins pour QGIS.
- de créer des applications externes appelant les fonctionnalités de QGIS.


Pourquoi Python-QGIS ?
----------------------

- Automatiser des actions répétitives
- Faire tourner des scripts
- Effectuer des traitements spécifiques
- Développer ses propre plugins
- Développer ses propres applications


Quelle(s) version(s) utiliser ?
-------------------------------

.. note::
  **Ce TP utilise QGIS 3. Il a été testé avec la version de 3.4.**

| Par rapport à QGIS 2.x, la version 3 présente l'avantage d'utiliser **Python 3** et **Qt 5**.
| Depuis novembre 2018, la dernière version maintenue sur le long terme (LTR) est la version 3.4.
| Le versionnement et le developpement de QGIS suivent un planning temporel : une nouvelle version stable tous les 4 mois.
  La liste des fonctionnalités ajoutées à chaque version peut être consultée en ligne : http://changelog.qgis.org/en/qgis/version/list/.

La documentation complète de l'API python qui va être utilisée est disponible en ligne : https://qgis.org/pyqgis/3.4/.


Console Python dans QGIS
------------------------

QGIS dispose d'une puissante interface de programmation qui permet d'étendre ses
fonctionnalités notamment en écrivant des scripts pour automatiser les traitements.
Cette API Python est généralement désignée sous le nom de **PyQgis**.

Même en étant débutant, en apprenant un peu de python, l'interface de programmation de QGIS permet
d'être plus productif (automatisation d'actions répétitives,
chargement personnalisés au démarrage de l'application, contournement de limites
imposées par l'interface graphique, etc.).

Ce tutoriel ne nécessite que peu de connaissances en programmation Python et
a pour but de donner une introduction aux capacités de scripting dans QGIS avec PyQGIS.

.. note::
  Dans les exercices suivants, faîtes l'effort d'écrire le code plutôt que de le copier-coller.
  Cela facilitera votre compréhension et vous évitera d'éventuelles erreurs de syntaxe.

QGIS fournit une console interactive python. Elle peut être ouverte depuis le
menu ``Extension > Console Python``, en pressant ``CTRL-ALT-P`` ou en appuyant
sur l'icone qui lui est dédiée.

Lors de l'utilisation de la console Python dans QGIS, une variable ``iface`` est
déjà existante. Cette variable est une instance de ``QgsInterface`` et elle
permet d'accéder au canevas de la carte, aux menus, barres d'outils et aux
autres parties de l'application QGIS ouverte.
De même lors du démarrage d'une session interactive dans cette console,
les imports suivants sont réalisés :

::

  from qgis.core import *
  import qgis.util


Lors de l'utilisation interactive de la console Python, la fonction native ``dir()`` pourra s'avérer très utile : en
effet elle permet d'obtenir une liste d’attributs valides pour l'objet qui lui est donné en argument.

Par exemple, la liste des attributs d'une variable (ici de type ``list``) peut être récupérée
de la manière suivante :
::

  a = [1, 2, 3]
  dir(a) # Retourne une liste contenant les attributs de 'a'

Les objets de PyQgis disposent généralement d'un grand nombre d'attributs.
Ne pas hésiter à utiliser une *liste de compréhension* pour filter ce résultat.
Par exemple si on souhaite seulement une liste des attributs de
l'objet ``iface`` qui contiennent le terme 'layer' :
::

  [name for name in dir(iface) if 'layer' in name.lower()]
  # En respectant l'ordre des éléments de notre liste de compréhension,
  # on pourrait exprimer cette instruction de la façon suivante :
  # "Ajoute 'name' à la liste pour chaque 'name'
  # dans les attributs de 'iface' si 'name' en minuscule contient
  # la chaine de caractère 'layer'"


Par ailleurs il est possible de connaitre le type de cette variable en utilisant
la fonction native ``type()`` :

::

  >>> type(iface)
  # <class 'qgis._gui.QgisInterface'>

Cette fonctionnalité pourra être utile pour aller chercher des informations
dans la documentation de l'API PyQgis.
